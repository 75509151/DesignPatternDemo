this is the sample for <head first design pattern>

list:

Decorator
Facade
SingleTon
factory
observer

-----------------Decorator--------------------------------------------
对扩展开放，对修改关闭。

缺点： 利用装饰着模式，常常会造成设计中有大量的小雷，数量实在太多，可能会造成使用此api程序员的困扰。

decorator1:
         主要是咖啡店的四种标准咖啡类型，然后分别添加四种辅料的设计

decorator2:
   java sdk java.io.inputstream 使用了decorator pattern
    


-----------------Facade------------------------------------------------
外观模式： 核心是将方法封装，按照功能封装，只需要调用少量的接口。

-----------------Adapter-----------------------------------------------
adapter1:

two category:
               1, Object Adapter: implment interface
               2, Class Adapter: multi-extends
               
adapter2:
               Enumeration----->Iterator
               Iterator----->Enumeration   
           


-----------------SingleTon----------------------------------------------
Note:
      1,在多线程时，需要同步。但是同步会耗费性能，所以采用双重检查加锁的方式来优化。
      2，每个类加载器都定义了一个命名空间，如果有两个以上的类加载器，不同的类加载器可能会加载同样一个类，从整个
        程序来看，同一个类会被加载多次。解决方法是：自行制定类加载器，并制定同一个类加载器。

-----------------Factory------------------------------------------------
工厂模型都用来封装对象的创建。工厂模型通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。

在应用工厂方法之后，高层组件（PizzaStore）和低层组件（DifferentPizza）都依赖Pizza抽象

two category:
1, 工厂方法
   eg，PizzaStore
2, 抽象工厂
   eg.PizzaIngredientFactory



-----------------Observer-----------------------------------------------
observer1: user  the <head first customize observer code>
observer2: user the Java sdk's internal observer code 

different between observer1 and observer2:

the update order is different, the doc is follwing:

public class Observable
extends Object
此类表示模型视图范例中的 observable 对象，或者说“数据”。可将其子类化，表示应用程序想要观察的对象。

一个 observable 对象可以有一个或多个观察者。观察者可以是实现了 Observer 接口的任意对象。一个 observable 实例改变后，调用 Observable 的 notifyObservers 方法的应用程序会通过调用观察者的 update 方法来通知观察者该实例发生了改变。

未指定发送通知的顺序。Observable 类中所提供的默认实现将按照其注册的重要性顺序来通知 Observers，但是子类可能改变此顺序，从而使用非固定顺序在单独的线程上发送通知，或者也可能保证其子类遵从其所选择的顺序。

注意，此通知机制与线程无关，并且与 Object 类的 wait 和 notify 机制完全独立。



follow the sample code, the result is following:

observer1 result:
com.mike.designpattern.observer1.ConditionDisplay1 Current condition ---- mTemprature is :1.0 mHumidity is :2.0 mPressure is :3.0 HeatIndex is :6.0
com.mike.designpattern.observer1.ConditionDisplay2 Current condition ---- mTemprature is :1.0 mHumidity is :2.0 mPressure is :3.0 HeatIndex is :6.0
com.mike.designpattern.observer1.ConditionDisplay3 Current condition ---- mTemprature is :1.0 mHumidity is :2.0 mPressure is :3.0 HeatIndex is :6.0
com.mike.designpattern.observer1.ConditionDisplay1 Current condition ---- mTemprature is :4.0 mHumidity is :5.0 mPressure is :6.0 HeatIndex is :120.0
com.mike.designpattern.observer1.ConditionDisplay2 Current condition ---- mTemprature is :4.0 mHumidity is :5.0 mPressure is :6.0 HeatIndex is :120.0
com.mike.designpattern.observer1.ConditionDisplay3 Current condition ---- mTemprature is :4.0 mHumidity is :5.0 mPressure is :6.0 HeatIndex is :120.0
com.mike.designpattern.observer1.ConditionDisplay1 Current condition ---- mTemprature is :7.0 mHumidity is :8.0 mPressure is :9.0 HeatIndex is :504.0
com.mike.designpattern.observer1.ConditionDisplay2 Current condition ---- mTemprature is :7.0 mHumidity is :8.0 mPressure is :9.0 HeatIndex is :504.0
com.mike.designpattern.observer1.ConditionDisplay3 Current condition ---- mTemprature is :7.0 mHumidity is :8.0 mPressure is :9.0 HeatIndex is :504.0


observer2 result:
com.mike.designpattern.observer2.ConditionDisplay3 Current condition ---- mTemprature is :1.0 mHumidity is :2.0 mPressure is :3.0 HeatIndex is :6.0
com.mike.designpattern.observer2.ConditionDisplay2 Current condition ---- mTemprature is :1.0 mHumidity is :2.0 mPressure is :3.0 HeatIndex is :6.0
com.mike.designpattern.observer2.ConditionDisplay1 Current condition ---- mTemprature is :1.0 mHumidity is :2.0 mPressure is :3.0 HeatIndex is :6.0
com.mike.designpattern.observer2.ConditionDisplay3 Current condition ---- mTemprature is :4.0 mHumidity is :5.0 mPressure is :6.0 HeatIndex is :120.0
com.mike.designpattern.observer2.ConditionDisplay2 Current condition ---- mTemprature is :4.0 mHumidity is :5.0 mPressure is :6.0 HeatIndex is :120.0
com.mike.designpattern.observer2.ConditionDisplay1 Current condition ---- mTemprature is :4.0 mHumidity is :5.0 mPressure is :6.0 HeatIndex is :120.0
com.mike.designpattern.observer2.ConditionDisplay3 Current condition ---- mTemprature is :7.0 mHumidity is :8.0 mPressure is :9.0 HeatIndex is :504.0
com.mike.designpattern.observer2.ConditionDisplay2 Current condition ---- mTemprature is :7.0 mHumidity is :8.0 mPressure is :9.0 HeatIndex is :504.0
com.mike.designpattern.observer2.ConditionDisplay1 Current condition ---- mTemprature is :7.0 mHumidity is :8.0 mPressure is :9.0 HeatIndex is :504.0

